#include<bits/stdc++.h>
using namespace std;
struct Node
{
    Node* lft;
    Node* rgt;
    int key;
    int height;
};

int height(Node *N)
{
    if (N == NULL)
    return 0;
    return N->height;
}

int max(int a,int b)
{
    return a>b?a:b;
}

Node* newNode(int key)
{
    Node* node= new Node();
    node->lft=NULL;
    node->rgt=NULL;
    node->height=1;
    return(node);
}

struct Node *rgtRotate(struct Node *y)
{
    Node *x = y->lft;
    Node *T2 = x->rgt;
    x->rgt=y;
    x->lft=T2;
    y->height = max(height(y->lft), height(y->rgt))+1;
    x->height = max(height(x->lft), height(x->rgt))+1;
    return x;
}

struct Node *lftRotate(struct Node *x)
{
    Node *y = x->rgt;
    Node *T2 = y->lft;
    y->lft=x;
    x->rgt=T2;
    x->height = max(height(x->lft), height(x->rgt))+1;
    y->height = max(height(y->lft), height(y->rgt))+1;
    return y;
}

int getBalance(struct Node *N)
{
if (N == NULL)
return 0;
return height(N->lft) - height(N->rgt);
}

Node* insert(Node* node , int key)
{
    if(node==NULL)
    {
        return newNode(key);
    }
    if(key<node->key)
    node->lft=insert(node->lft,key);
    else if(key>node->key)
    node->rgt=insert(node->rgt,key);
    else
    return node;
    
    node->height = 1 + max(height(node->rgt),height(node->lft));
    int balance = getBalance(node);
    if (balance >1 && key<node->lft->key)
    return rgtRotate(node);
    
    if (balance <-1 && key>node->rgt->key);
    return lftRotate(node);
    
    if(balance>1 && key > node->lft->key)
    {
    node->lft=lftRotate(node->lft);
    return rgtRotate(node);
    }
    
    if(balance <-1 && key<node->rgt->key)
    {
        node->rgt=rgtRotate(node->rgt);
        return lftRotate(node);
    }
    return node;
}

Node* minValNode(Node* node)
{
    Node* curr=node;
    while(curr->lft!=NULL)
    {
        curr=curr->lft;
    }
    return curr;
}

Node* delNode(Node* base, int key)
{
    if(base==NULL)
    return base;
    if(key<base->key)
    base->lft=delNode(base->lft,key);
    else if(key>base->key)
    base->rgt=delNode(base->rgt,key);
    else
    {
        if(base->lft==NULL and base->rgt==NULL)
        return NULL;
        else if (base->lft == NULL) {
        Node* temp = base->rgt;
        delete(base);
        return temp;
        }
        else if(base->rgt==NULL)
        {
            Node* temp = base->lft;
            delete(base);
            return temp;
        }
        Node* temp = minValNode(base->rgt);
        base->key = temp->key;
        base->rgt = delNode(base->rgt, temp->key);
    }
    if(base==NULL)
    return base;
    base->height=max(height(base->lft),height(base->rgt));
    int balance = getBalance(base);
    if (balance>1 && getBalance(base->lft)>= 0)
        return rgtRotate(base);
    if (balance >1 && getBalance(base->lft)<0)
    {
    base->lft = lftRotate(base->lft);
    return rgtRotate(base);
    }
    if (balance<-1 && getBalance(base->rgt) <= 0)
    return lftRotate(base);
    if (balance <-1 && getBalance(base->rgt)>0)
    {
    base->rgt = rgtRotate(base->rgt);
    return lftRotate(base);
    }
    return base;
}

void preOrder(Node* base)
{
    if(base!=NULL)
    {
    cout<<base->key;
    preOrder(base->lft);
    preOrder(base->rgt);
    }
}
int main()
{
    Node *base = NULL;
    base = insert(base, 27);
    base = insert(base, 9);
    base = insert(base, 19);
    base = insert(base, 91);
    base = insert(base, 90);
    base = insert(base, 72);
    cout<<"OUTPUT:";
    preOrder(base);
    base=delNode(base,9);
    cout<<"\n";
    preOrder(base);
}
